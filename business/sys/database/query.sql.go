// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package omslitedb

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  productname, quantity
) VALUES (
  $1, $2
)
RETURNING id
`

type CreateOrderParams struct {
	Productname string `json:"productname"`
	Quantity    int64  `json:"quantity"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.Productname, arg.Quantity)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, productname, quantity FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.Productname, &i.Quantity)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, productname, quantity FROM orders
ORDER BY orders.id
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(&i.ID, &i.Productname, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
